# Commit Rules

## Commit Message Format
```
type(scope): subject

[optional body]

[optional footer(s)]
```

## Types
- **feat**: A new feature or enhancement
- **fix**: A bug fix
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (formatting, missing semi-colons, etc)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools and libraries
- **ci**: Changes to CI configuration files and scripts
- **revert**: Reverts a previous commit

## Scope
The scope should be the name of the module affected:
- **admission**: Admission-related functionality
- **tools**: Tool implementations
- **entities**: Data models and entities
- **config**: Configuration changes
- **services**: Service layer functionality
- **ui**: User interface components
- **api**: API-related changes
- **deps**: Dependency updates

## Subject
- Use the imperative, present tense: "change" not "changed" nor "changes"
- Don't capitalize the first letter
- No dot (.) at the end
- Maximum 72 characters

## Body
- Optional detailed description
- Use to explain the motivation behind the change
- Wrap at 72 characters
- Use multiple paragraphs if needed

## Footer
- Optional
- Reference issues that this commit closes: "Closes #123, #456"
- Breaking changes should start with "BREAKING CHANGE:"

## Examples
```
feat(admission): implement admission requirements validation

Add validation logic to ensure students meet all requirements
before proceeding with application submission.

Closes #42
```

```
fix(tools): correct tuition calculation for international students
```

```
docs(readme): update installation instructions
```

```
refactor(entities): simplify student data model

BREAKING CHANGE: Student.contact_info now requires an email address
```

## Branch Naming Convention
```
type/short-description
```

Examples:
- feat/admission-validation
- fix/tuition-calculation
- docs/readme-update

## Code Review Checklist
- Does the code follow the project's style guidelines?
- Is the code well-documented?
- Are there appropriate tests?
- Does the code address the requirements?
- Is there any redundant or duplicate code?
- Are error cases handled appropriately?
- Is the code maintainable?
